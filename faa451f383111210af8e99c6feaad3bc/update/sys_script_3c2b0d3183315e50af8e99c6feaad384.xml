<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_1521017_bus_seat_seat_reservation</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message><![CDATA[<p>TEsting yowww mista white!!!!</p>]]></message>
        <name>Seat Reservation Cancellation</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Add your code here

	if (current.status == 'canceled') {
		var busReference = current.bus;
		
		// Runs if the bus column is not empty
		if (busReference) {
			var busUnitRecord = new GlideRecord('x_1521017_bus_seat_bus_unit');
			
			// .get() will also store the data in the busUnitRecord
			if (busUnitRecord.get(busReference)) {
				var departureSchedule = new GlideDateTime(busUnitRecord.getDisplayValue('departure_schedule_test'));

				var ctUTC = new GlideDateTime(); // Get the current time
				var currentTime = new GlideDateTime(ctUTC.getDisplayValue());

				var timeDifference = departureSchedule.getNumericValue() - currentTime.getNumericValue(); // Using .getNumericValue() on a GLideDateTime Object will return the milliseconds of that object
				// 1000 milliseconds is equal to 1 second
				// Time it to 60 reuslts to 60 seconds which means 1 minute
				var minutesDifference = timeDifference / (1000 * 60);

				if (minutesDifference < 30 || minutesDifference > 60) {
					gs.addErrorMessage('You can only cancel a seat reservation 30min-1hr prior to the departure schedule.');
					current.setAbortAction(true); // Prevent saving the record
				}
			}
		}
	}


	var test = current.bus; // For script debugging purposes
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>samira.goodwin</sys_created_by>
        <sys_created_on>2024-11-11 16:38:57</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>3c2b0d3183315e50af8e99c6feaad384</sys_id>
        <sys_mod_count>36</sys_mod_count>
        <sys_name>Seat Reservation Cancellation</sys_name>
        <sys_overrides/>
        <sys_package display_value="Bus Seat Reservation" source="x_1521017_bus_seat">faa451f383111210af8e99c6feaad3bc</sys_package>
        <sys_policy/>
        <sys_scope display_value="Bus Seat Reservation">faa451f383111210af8e99c6feaad3bc</sys_scope>
        <sys_update_name>sys_script_3c2b0d3183315e50af8e99c6feaad384</sys_update_name>
        <sys_updated_by>samira.goodwin</sys_updated_by>
        <sys_updated_on>2024-11-13 10:17:07</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=3c2b0d3183315e50af8e99c6feaad384"/>
</record_update>
